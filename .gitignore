# --- Python ---
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/version info into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# --- Virtual Environments ---
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# --- Jupyter Notebook ---
# Checkpoints
.ipynb_checkpoints/

# IPython
profile_default/
ipython_config.py

# Runtime files (can be large or user-specific)
# Consider if some specific runtime outputs should be versioned if they are critical for reproducibility
# and not too large, but generally, they are ignored.
*.csv # If they are outputs of the notebook, not input data
*.json # If they are outputs of the notebook (like segmentation_config_saved.json)
       # but INITIAL_SEGMENTATION_CONFIG *within* the script should be versioned.
*.pkl
*.h5  # If these are trained models and too large for Git LFS
*.model
*.joblib
*.npz # If these are large data outputs

# Plots/Images generated by the notebook (if not meant to be in the repo)
# *.png
# *.jpg
# *.svg
# *.pdf # If these are generated figures/reports

# --- Data ---
# Generally, large raw data files are not versioned directly in Git.
# Use Git LFS or store them separately and document how to obtain them.
# The following line assumes your 'raw' data is handled outside Git.
# If you decide to use Git LFS for 'raw', remove or modify this line.
raw/
# Or, if you want to track the directory structure but not the files initially:
# raw/*
# !raw/.gitkeep

# Any other processed data directories
processed_data/
features/

# --- IDEs and Editors ---
# VS Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# PyCharm
.idea/
*.iml
modules.xml
workspace.xml # User-specific workspace settings
tasks.xml # User-specific tasks

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# Eclipse
.project
.cproject
.pydevproject

# Netbeans
nbproject/

# --- OS-generated files ---
# macOS
.DS_Store
.AppleDouble
.LSOverride
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Linux
*~
# Windows
# Desktop.ini
# Thumbs.db

# --- Other ---
# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Temporary files
*.tmp
*.swp
*.swo

# Conda environments
# If you use conda-pack to share environments
# *.tar.gz
# But generally, environment.yml is preferred for conda

# Secrets - NEVER commit secrets
*.env
.env.*
secrets.yml
credentials.*

# Gradio specific cache (if any, not usually an issue)
.gradio_cache/

# Specific to your project if needed
# segmentation_tuner_config_saved.json # If you output this from the tuner
raw/*

# Tree file (if generated and not meant to be versioned)
tree.txt
project_context.txt 